<?php

class T
{
    public function AltaConImagen()
    {
        $unHelado = Helado::ObtenerUnHeladoPorArrayAsosiativo($_POST);
        $unHelado->SetImagen($_FILES['foto']['tmp_name'],$_FILES['foto']['name']);
        $unHelado->MoverImagen("ImagenesDeHelados/2024/");
        array_push($listaDeHelado,$unHelado);
        Helado::EscribirHeladoEnArrayJson($listaDeHelado,'heladeria.json');
    }

    public function Alta()
    {
        $unHelado = Helado::ObtenerUnHeladoPorArrayAsosiativo($_POST);
        array_push($listaDeHelado,$unHelado);
        Helado::EscribirHeladoEnArrayJson($listaDeHelado,'heladeria.json');
    }

    //Modify
    public function Modificar($listaDeVentas,$index)
    {
        $estado = false;

        if(isset($listaDeVentas)  && $index >= 0)
        {
            $listaDeVentas[$index] = $this;
            $estado = true;
        }

        return $estado;
    }
    public static function Borrar($listaDeVentas,$index)
    {
        $estado = false;

        if(isset($listaDeVentas) && $index >= 0)
        {
            $listaDeVentas[$index]->ModificarFoto("ImagenesBackupVentas/2024/",$listaDeVentas[$index]->nombreDeLaImagen);
            array_splice($listaDeVentas,$index,1);
            $estado = true;
        }

        return $estado;
    }

    public static function BuscarUnaClasePorId($listaDeClases,$id)
    {
        $index = -1;
        $leght = count($listaDeClases); 
        if(isset($listaDeClases)  && $leght > 0)
        {
            for ($i=0; $i < $leght; $i++) { 
         
                if( $listaDeClases[$i]->id == $id)
                {
                    $index = $i;
                    break;
                }
            }
        }

        return $index;
    }


    //Add Array

    public function add($lista,$unObj)
    {
        $estado = false;

            if(isset($listaDePizza) && isset($unObj))
            {
                array_push($listaDePizza,$unObj);
            }

            return  $estado ;
    }


    //Remove

    public function Remove($unAuto)
    {
       $retorno = false;
       $index = 0;

       if($retorno = ($unAuto != null && $this->Buscar($unAuto) == true))
       {
           $index = array_search($unAuto, $this->_autos);
           array_splice($this->_autos,$index,1);
       }

       
       return $retorno;
    }

    //Buscar

    public static function BuscarHeladoPorSabor($listaDeHelados,$sabor)
    {
        $unaHeladoABuscar = null; 

        if(isset($listaDeHelados) )
        {
            foreach($listaDeHelados as $unaHelado)
            {
                if($unaHelado->sabor == $sabor)
                {
                    $unaHeladoABuscar = $unaHelado; 
                    break;
                }
            }
        }

        return  $unaHeladoABuscar;
    }

    //Filtrar
    public static function FiltrarPorTipo($listaDePizzas,$tipo)
    {
        $listaDeTipoDePizza = null;

        if(isset($listaDePizzas) && isset($tipo) && count($listaDePizzas) > 0)
        {
            $listaDeTipoDePizza =  [];

            foreach($listaDePizzas as $unaT)
            {
                if($unaT->tipo == $tipo)
                {
                    array_push($listaDeTipoDePizza,$unaT);
                }
            }
        }

        return  $listaDeTipoDePizza;
    }

    //Contar

    public static function ContarPorUnaFecha($listaDeVenta,$fecha)
    {
        $filtraPorUnaFecha = null;
        $cantidad = -1;

        if(isset($listaDeVenta) && isset($fecha))
        {
            $cantidad = 0;

            foreach($listaDeVenta as $unaVenta)
            {
                if($unaVenta::$fechaDeVenta == $fecha)
                {
                    $cantidad++;
                }
            }
        }

        return  $filtraPorUnaFecha;
    }

}


class File
{
    private $path;
    private $nombreDelArchivo;

    public static function CrearUnDirectorio($ruta)
    {
        $estado = false;

        if(!file_exists($ruta)  )
        {
            $estado = mkdir($ruta);
        }

        return $estado;
    }
    public static function LeerArchivoCsv($nombreDeArchivo)
    {
        $listaDeLineas  = null;
        $unArchivo = fopen($nombreDeArchivo,"r");

        if(isset($unArchivo)){

            $listaDeLineas = [];
    
            while(($unaLinea = fgetcsv($unArchivo)) !== false){

                if(isset($unaLinea))
                {
                    array_push($listaDeLineas,$unaLinea);
                }
            }

            fclose($unArchivo);
        }

        return   $listaDeLineas ;
    }

    public function MoverFoto($tmpNombre,$rutaASubir,$nombreDeArchivo)
    {
        $estado = false;
       
        if(isset($tmpNombre) && isset($rutaASubir))
        {
            $rutaDestino = $rutaASubir . /*$this->nombre.*/ time(). $nombreDeArchivo;
            $estado =  move_uploaded_file($tmpNombre,$rutaDestino);
        }

        return $estado;
    }

    //img

  
    public function SetImagen($ruta,$nombreDelaImagen)
    {
        $estado = false;
        if(isset($ruta) && isset($nombreDelaImagen))
        {
            $this->nombreDeLaImagen = $this->sabor.$this->tipo.$nombreDelaImagen;
            $this->rutaDeLaImagen = $ruta;
            $estado = true;
        }

        return $estado;
    }

    public function MoverImagen($nuevaRuta)
    {
        $estado = false;
        if(File::MoverFoto($this->rutaDeLaImagen,$nuevaRuta,$this->nombreDeLaImagen))
        {
            $this->rutaDeLaImagen = $nuevaRuta;
            $estado = true;
        }

        return $estado;
    }

   

    public function recortarHastaCaracter($cadena, $caracter) {
        // Encontrar la posici칩n del primer car치cter especificado en la cadena
        $nuevoStr = null;

        if(($posicion = strpos($cadena, $caracter)) !== false)
        {
            // Recortar la cadena hasta la posici칩n del car치cter y devolver el resultado
            $nuevoStr = substr($cadena, 0, $posicion);
        }

        return $nuevoStr;
    }
}



